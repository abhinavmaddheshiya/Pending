class Solution {
public:
    void dfs(vector<vector<int>>& edge, vector<bool> &visit, int n, int source){
        visit[source]=1;
        for(int i=0;i<edge[source].size();i++){
            if(edge[source][i]==1 && !visit[i]){
                visit[i]=1;
                dfs(edge, visit, n, i);
            }
        }
    }
    bool validPath(int n, vector<vector<int>>& edges, int source, int destination) {
        vector<bool> visit(n);
        for(int i=0;i<n;i++){
            visit[i]=0;
        }
        vector<vector<int>> edge2d(n, vector<int>(n));
        for(int i=0;i<n;i++){
            for(int j=0;j<n;j++){
                edge2d[i][j]=0;
            }
        }
        for(int i=0;i<edges.size();i++){
            edge2d[edges[i][0]][edges[i][1]]=1;
            edge2d[edges[1][i]][edges[i][0]]=1;
        }
        dfs(edge2d, visit, n, source);
        return visit[destination]? true:false;
    }
};
