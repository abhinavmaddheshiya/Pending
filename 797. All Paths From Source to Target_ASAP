class Solution {
public:
    void dfs(vector<vector<int>>& graph, vector<int>& path, int curr, vector<vector<int>> &ans){
        path.push_back(curr);
        if(curr==graph.size()-1){
            ans.push_back(path);
            return;
        }
        for(int i=0;i<graph[curr].size();i++){
            dfs(graph, path, graph[curr][i], ans);
            path.pop_back();
        }
    }
    vector<vector<int>> allPathsSourceTarget(vector<vector<int>>& graph) {
        vector<vector<int>> ans;
        vector<int> path;
        dfs(graph, path, 0, ans);
        return ans;
    }
};
