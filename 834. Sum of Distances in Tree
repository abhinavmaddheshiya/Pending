class Solution {
public:
    vector<vector<int>> v;
    vector<int> result,count;
    void dfs(int curr, int parent = -1){
        for(auto t:v[curr]){
            if(t==parent)continue;
            dfs(t, curr);
            count[curr]+=count[t];
            result[curr]+=result[t]+count[t];
        }
        count[curr]+=1;
    }
    void dfsall(int curr, int n, int parent=-1){
        for(auto i:v[curr]){
            if(i==parent)continue;
            result[i]=result[curr]-count[i]+n-count[i];
            dfsall(i, n, curr);
        }
    }
    vector<int> sumOfDistancesInTree(int n, vector<vector<int>>& edges) {
        v.resize(n);
        result.resize(n);
        count.resize(n);
        for(int i=0;i<edges.size();i++){
            int a = edges[i][0];
            int b = edges[i][1];
            v[a].push_back(b);
            v[b].push_back(a);
        }

        dfs(0);
        dfsall(0,n);
        return result;
    }
};
